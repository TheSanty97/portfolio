---
// Componente interactivo para mostrar personajes con paginación y filtros
---
<div class="filters flex justify-center mb-4">
  <input id="nameFilter" placeholder="Nombre" />
  <input id="speciesFilter" placeholder="Especie" />
</div>

<div id="charactersGrid" class="characters-grid"></div>

<div class="pagination">
  <button id="prevBtn">Anterior</button>
  <span id="pageIndicator">Página 1</span>
  <button id="nextBtn">Siguiente</button>
</div>

<script type="module">
  let page = 1;
  let info = {};

  const nameInput = document.getElementById('nameFilter');
  const speciesInput = document.getElementById('speciesFilter');
  const grid = document.getElementById('charactersGrid');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  const pageIndicator = document.getElementById('pageIndicator');

  async function fetchCharacters() {
    let url = `https://rickandmortyapi.com/api/character?page=${page}`;
    const name = nameInput.value.trim();
    const species = speciesInput.value.trim();
    if (name) url += `&name=${encodeURIComponent(name)}`;
    if (species) url += `&species=${encodeURIComponent(species)}`;

    const res = await fetch(url);
    if (!res.ok) {
      grid.innerHTML = '<p>No se encontraron personajes</p>';
      info = {};
      updatePagination();
      return;
    }

    const data = await res.json();
    info = data.info;
    renderCharacters(data.results);
    updatePagination();
  }

  function renderCharacters(characters) {
    grid.innerHTML = '';
    characters.forEach(c => {
      const card = document.createElement('div');
      card.className = 'character-card';
      card.innerHTML = `
        <img src="${c.image}" alt="${c.name}" />
        <h3>${c.name}</h3>
        <p>${c.species}</p>
      `;
      grid.appendChild(card);
    });
  }

  function updatePagination() {
    pageIndicator.textContent = `Página ${page}`;
    prevBtn.disabled = !info.prev;
    nextBtn.disabled = !info.next;
  }

  prevBtn.addEventListener('click', () => {
    if (info.prev) page--;
    fetchCharacters();
  });

  nextBtn.addEventListener('click', () => {
    if (info.next) page++;
    fetchCharacters();
  });

  nameInput.addEventListener('input', () => { page = 1; fetchCharacters(); });
  speciesInput.addEventListener('input', () => { page = 1; fetchCharacters(); });

  // Inicial
  fetchCharacters();
</script>

<style>
.characters-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 1rem;
  width: 100%;
}
.character-card {
  background: rgba(255,255,255,0.1);
  border-radius: 10px;
  padding: 0.5rem;
  text-align: center;
  transition: transform 0.2s;
}
.character-card:hover {
  transform: scale(1.5) !important;
}
.character-card img:hover {
  transform: scale(1.5);
}
.character-card img {
  width: 100%;
  border-radius: 10px;
  transform: scale(1.5);
}
.filters {
  margin-bottom: 1rem;
}
.filters input {
  margin-right: 0.5rem;
  padding: 0.3rem 0.5rem;
}
.pagination {
  margin-top: 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
}
.pagination button {
  margin: 0 0.5rem;
  padding: 0.3rem 0.6rem;
}
</style>
